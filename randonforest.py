# -*- coding: utf-8 -*-
"""RandonForest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bS3qWDBz77NF6JXbIJUHnEdch8lhKrR4
"""

'''
Bibliotecas e Funções Utilizadas
pandas e numpy:

pandas: Usado para manipulação e análise de dados tabulares (ex.: carregar e pré-processar o arquivo CSV).

numpy: Usado para cálculos numéricos e manipulação de arrays.

train_test_split (de sklearn.model_selection):

Divide o conjunto de dados em treinamento e teste.

test_size=0.3: Reserva 30% dos dados para teste.

random_state=10: Garante que a divisão seja reproduzível.

RandomForestClassifier (de sklearn.ensemble):

Algoritmo baseado em uma floresta de árvores de decisão (ensemble learning).

Parâmetros principais:

random_state=1: Reprodutibilidade.

max_depth=20: Limita a profundidade máxima das árvores.

max_leaf_nodes=12: Limita o número máximo de nós-folha.

n_estimators=500: Número de árvores na floresta.

LabelEncoder (de sklearn.preprocessing):

Transforma variáveis categóricas (ex.: "Feminino" e "Masculino") em números para que os modelos matemáticos possam processá-las.

Métricas (de sklearn.metrics):

accuracy_score: Percentual de previsões corretas.

precision_score: Proporção de positivos previstos que são corretos.

recall_score: Proporção de positivos reais que foram corretamente identificados.

f1_score: Combinação harmônica entre precisão e recall.

classification_report: Relatório detalhado com métricas por classe.

matplotlib.pyplot e plot_tree:

matplotlib.pyplot: Biblioteca de visualização de dados.

plot_tree: Função para plotar uma árvore de decisão individual da floresta.
'''

import pandas as pd #Usado para manipulação e análise de dados tabulares (ex.: carregar e pré-processar o arquivo CSV).

import numpy as np  # Usado para cálculos numéricos e manipulação de arrays.

from sklearn.model_selection import train_test_split #Divide o conjunto de dados em treinamento e teste.

from sklearn.ensemble import RandomForestClassifier #Algoritmo baseado em uma floresta de árvores de decisão (ensemble learning).

from sklearn.preprocessing import LabelEncoder #Transforma variáveis categóricas (ex.: "Feminino" e "Masculino") em números para que os modelos matemáticos possam processá-las.

from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score, classification_report

import matplotlib.pyplot as plt # Biblioteca de visualização de dados.
from sklearn.tree import plot_tree # Função para plotar uma árvore de decisão individual da floresta.

'''
1. Carregamento e Pré-processamento do Dataset
O arquivo insurance.csv é carregado com pd.read_csv.

Coluna desnecessária (Unnamed: 0) é removida usando drop.

Dados categóricos são transformados em números com LabelEncoder.

Por que isso é feito?
Os modelos de machine learning operam apenas com dados numéricos.
'''
base = pd.read_csv('insurance.csv', keep_default_na=False)
base.head()

base = base.drop(columns=['Unnamed: 0'])
base.head()
y = base.iloc[:,7].values
X = base.drop(base.columns[7],axis = 1).values
X

labelencoder = LabelEncoder()
for i in range(X.shape[1]):
  if X[:,i].dtype == 'object':
    X[:,i] = labelencoder.fit_transform(X[:,i])
X
#O que faz:

#Verifica se a coluna contém valores categóricos (dtype == 'object').

#Transforma categorias (ex: "Feminino", "Masculino") em números (0, 1).

#Por que isso é necessário? Modelos matemáticos só trabalham com números.

'''
2. Divisão em Treinamento e Teste
O dataset é dividido em variáveis de entrada (X) e saída (y).

train_test_split separa os dados em treinamento (70%) e teste (30%).
'''
X_treinamento, X_teste, y_treinamento, y_teste = train_test_split(X, y, test_size=0.3, random_state=10)
#test_size=0.3: Reserva 30% dos dados para teste.
#random_state=10: Garante a mesma divisão sempre que o código é executado



'''
3. Treinamento do Modelo Random Forest
Um RandomForestClassifier é inicializado com:

500 árvores, cada uma com profundidade máxima de 20 e até 12 nós-folha.

O modelo é treinado com fit(X_treinamento, y_treinamento).

O que é Random Forest?
É um algoritmo de aprendizado baseado em várias árvores de decisão. Cada árvore fornece uma predição, e a floresta decide com base na maioria das árvores.
'''
modelo = RandomForestClassifier(random_state=1,max_depth=20,max_leaf_nodes=12, n_estimators=500)
modelo.fit(X_treinamento, y_treinamento)


'''
4. Visualização de uma Árvore da Floresta
Uma árvore individual da floresta é visualizada usando plot_tree.. Predições e Avaliação
As predições são feitas com modelo.predict(X_teste).

Métricas de desempenho são calculadas:

Acurácia, Precisão, Recall e F1-Score.

classification_report fornece métricas detalhadas para cada classe.



Mostra como a árvore divide os dados em nós-folha com base nas variáveis.


'''

tree_index = 0 #Numero da arvore que quer visualizar
tree_to_visualize = modelo.estimators_[tree_index]
plt.figure(figsize=(20, 10))
plot_tree(tree_to_visualize, filled=True, feature_names=base.columns[:-1], class_names=True,rounded=True)
plt.show()


'''
. Predições e Avaliação
As predições são feitas com modelo.predict(X_teste).

Métricas de desempenho são calculadas:

Acurácia, Precisão, Recall e F1-Score.

classification_report fornece métricas detalhadas para cada classe.


'''
previsoes = modelo.predict(X_teste)
previsoes

acuracy = accuracy_score(y_teste, previsoes)#Acurácia: Percentual de previsões corretas.
precision = precision_score(y_teste, previsoes, average='weighted')#Precisão: Percentual de positivos previstos que são realmente positivos.
recall = recall_score(y_teste, previsoes,average='weighted')#Recall: Percentual de positivos reais que foram identificados.
f1 = f1_score(y_teste, previsoes,average='weighted')#F1-Score: Combinação da precisão e recall.
print(f'Acurácia: {acuracy:.4f}')
print(f'Precisão: {precision:.4f}')
print(f'Recall: {recall:.4f}')
print(f'F1: {f1:.4f}')

report = classification_report(y_teste, previsoes)
print(report) #Mostra métricas detalhadas para cada classe